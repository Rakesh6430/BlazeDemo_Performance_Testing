/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1137.0, "minX": 0.0, "maxY": 38474.0, "series": [{"data": [[0.0, 1137.0], [0.1, 1240.0], [0.2, 1369.0], [0.3, 1432.0], [0.4, 1433.0], [0.5, 1451.0], [0.6, 1532.0], [0.7, 1555.0], [0.8, 1579.0], [0.9, 1640.0], [1.0, 1715.0], [1.1, 1744.0], [1.2, 1754.0], [1.3, 1798.0], [1.4, 1803.0], [1.5, 1832.0], [1.6, 1837.0], [1.7, 1862.0], [1.8, 1869.0], [1.9, 1888.0], [2.0, 1910.0], [2.1, 1923.0], [2.2, 1954.0], [2.3, 1994.0], [2.4, 2010.0], [2.5, 2016.0], [2.6, 2022.0], [2.7, 2062.0], [2.8, 2071.0], [2.9, 2075.0], [3.0, 2116.0], [3.1, 2128.0], [3.2, 2171.0], [3.3, 2186.0], [3.4, 2224.0], [3.5, 2247.0], [3.6, 2268.0], [3.7, 2284.0], [3.8, 2347.0], [3.9, 2368.0], [4.0, 2399.0], [4.1, 2426.0], [4.2, 2513.0], [4.3, 2539.0], [4.4, 2553.0], [4.5, 2609.0], [4.6, 2616.0], [4.7, 2701.0], [4.8, 2735.0], [4.9, 2767.0], [5.0, 2796.0], [5.1, 2857.0], [5.2, 2955.0], [5.3, 3065.0], [5.4, 3095.0], [5.5, 3138.0], [5.6, 3157.0], [5.7, 3181.0], [5.8, 3275.0], [5.9, 3316.0], [6.0, 3321.0], [6.1, 3392.0], [6.2, 3396.0], [6.3, 3397.0], [6.4, 3410.0], [6.5, 3438.0], [6.6, 3501.0], [6.7, 3521.0], [6.8, 3540.0], [6.9, 3634.0], [7.0, 3657.0], [7.1, 3665.0], [7.2, 3690.0], [7.3, 3702.0], [7.4, 3735.0], [7.5, 3739.0], [7.6, 3760.0], [7.7, 3781.0], [7.8, 3798.0], [7.9, 3833.0], [8.0, 3854.0], [8.1, 3863.0], [8.2, 3890.0], [8.3, 3902.0], [8.4, 3925.0], [8.5, 3951.0], [8.6, 3957.0], [8.7, 3967.0], [8.8, 3983.0], [8.9, 4014.0], [9.0, 4031.0], [9.1, 4037.0], [9.2, 4054.0], [9.3, 4066.0], [9.4, 4096.0], [9.5, 4120.0], [9.6, 4128.0], [9.7, 4136.0], [9.8, 4152.0], [9.9, 4166.0], [10.0, 4190.0], [10.1, 4219.0], [10.2, 4229.0], [10.3, 4242.0], [10.4, 4256.0], [10.5, 4262.0], [10.6, 4274.0], [10.7, 4282.0], [10.8, 4297.0], [10.9, 4298.0], [11.0, 4317.0], [11.1, 4360.0], [11.2, 4364.0], [11.3, 4376.0], [11.4, 4378.0], [11.5, 4423.0], [11.6, 4444.0], [11.7, 4465.0], [11.8, 4481.0], [11.9, 4501.0], [12.0, 4505.0], [12.1, 4512.0], [12.2, 4537.0], [12.3, 4541.0], [12.4, 4557.0], [12.5, 4574.0], [12.6, 4638.0], [12.7, 4653.0], [12.8, 4696.0], [12.9, 4703.0], [13.0, 4761.0], [13.1, 4820.0], [13.2, 4870.0], [13.3, 4907.0], [13.4, 4940.0], [13.5, 4997.0], [13.6, 5034.0], [13.7, 5082.0], [13.8, 5126.0], [13.9, 5148.0], [14.0, 5239.0], [14.1, 5280.0], [14.2, 5314.0], [14.3, 5352.0], [14.4, 5381.0], [14.5, 5398.0], [14.6, 5426.0], [14.7, 5458.0], [14.8, 5481.0], [14.9, 5505.0], [15.0, 5545.0], [15.1, 5556.0], [15.2, 5574.0], [15.3, 5632.0], [15.4, 5666.0], [15.5, 5703.0], [15.6, 5725.0], [15.7, 5734.0], [15.8, 5767.0], [15.9, 5800.0], [16.0, 5867.0], [16.1, 6066.0], [16.2, 6532.0], [16.3, 6692.0], [16.4, 6743.0], [16.5, 6754.0], [16.6, 6781.0], [16.7, 6795.0], [16.8, 6891.0], [16.9, 6893.0], [17.0, 6947.0], [17.1, 6991.0], [17.2, 7073.0], [17.3, 7092.0], [17.4, 7125.0], [17.5, 7150.0], [17.6, 7191.0], [17.7, 7254.0], [17.8, 7310.0], [17.9, 7402.0], [18.0, 7455.0], [18.1, 7462.0], [18.2, 7470.0], [18.3, 7550.0], [18.4, 7566.0], [18.5, 7718.0], [18.6, 7780.0], [18.7, 7847.0], [18.8, 7880.0], [18.9, 7928.0], [19.0, 7976.0], [19.1, 8001.0], [19.2, 8021.0], [19.3, 8038.0], [19.4, 8058.0], [19.5, 8079.0], [19.6, 8136.0], [19.7, 8147.0], [19.8, 8189.0], [19.9, 8197.0], [20.0, 8309.0], [20.1, 8346.0], [20.2, 8357.0], [20.3, 8400.0], [20.4, 8521.0], [20.5, 8542.0], [20.6, 8597.0], [20.7, 8609.0], [20.8, 8641.0], [20.9, 8706.0], [21.0, 8923.0], [21.1, 9001.0], [21.2, 9145.0], [21.3, 9869.0], [21.4, 9922.0], [21.5, 11238.0], [21.6, 12189.0], [21.7, 12797.0], [21.8, 23302.0], [21.9, 25619.0], [22.0, 25913.0], [22.1, 25917.0], [22.2, 25934.0], [22.3, 25943.0], [22.4, 25960.0], [22.5, 25966.0], [22.6, 26008.0], [22.7, 26018.0], [22.8, 26018.0], [22.9, 26021.0], [23.0, 26027.0], [23.1, 26033.0], [23.2, 26037.0], [23.3, 26041.0], [23.4, 26050.0], [23.5, 26064.0], [23.6, 26070.0], [23.7, 26079.0], [23.8, 26105.0], [23.9, 26117.0], [24.0, 26151.0], [24.1, 26156.0], [24.2, 26162.0], [24.3, 26186.0], [24.4, 26189.0], [24.5, 26193.0], [24.6, 26196.0], [24.7, 26214.0], [24.8, 26235.0], [24.9, 26241.0], [25.0, 26256.0], [25.1, 26260.0], [25.2, 26270.0], [25.3, 26278.0], [25.4, 26312.0], [25.5, 26332.0], [25.6, 26341.0], [25.7, 26347.0], [25.8, 26355.0], [25.9, 26361.0], [26.0, 26367.0], [26.1, 26370.0], [26.2, 26376.0], [26.3, 26385.0], [26.4, 26386.0], [26.5, 26387.0], [26.6, 26393.0], [26.7, 26397.0], [26.8, 26404.0], [26.9, 26408.0], [27.0, 26420.0], [27.1, 26426.0], [27.2, 26438.0], [27.3, 26447.0], [27.4, 26451.0], [27.5, 26453.0], [27.6, 26459.0], [27.7, 26463.0], [27.8, 26470.0], [27.9, 26476.0], [28.0, 26485.0], [28.1, 26489.0], [28.2, 26501.0], [28.3, 26510.0], [28.4, 26513.0], [28.5, 26520.0], [28.6, 26521.0], [28.7, 26524.0], [28.8, 26524.0], [28.9, 26527.0], [29.0, 26531.0], [29.1, 26535.0], [29.2, 26537.0], [29.3, 26538.0], [29.4, 26542.0], [29.5, 26550.0], [29.6, 26554.0], [29.7, 26560.0], [29.8, 26563.0], [29.9, 26581.0], [30.0, 26586.0], [30.1, 26590.0], [30.2, 26592.0], [30.3, 26592.0], [30.4, 26621.0], [30.5, 26634.0], [30.6, 26635.0], [30.7, 26639.0], [30.8, 26643.0], [30.9, 26644.0], [31.0, 26646.0], [31.1, 26650.0], [31.2, 26652.0], [31.3, 26653.0], [31.4, 26659.0], [31.5, 26660.0], [31.6, 26661.0], [31.7, 26664.0], [31.8, 26668.0], [31.9, 26672.0], [32.0, 26678.0], [32.1, 26685.0], [32.2, 26691.0], [32.3, 26699.0], [32.4, 26714.0], [32.5, 26727.0], [32.6, 26731.0], [32.7, 26732.0], [32.8, 26736.0], [32.9, 26738.0], [33.0, 26744.0], [33.1, 26746.0], [33.2, 26752.0], [33.3, 26758.0], [33.4, 26761.0], [33.5, 26764.0], [33.6, 26765.0], [33.7, 26768.0], [33.8, 26769.0], [33.9, 26772.0], [34.0, 26774.0], [34.1, 26775.0], [34.2, 26776.0], [34.3, 26776.0], [34.4, 26777.0], [34.5, 26783.0], [34.6, 26786.0], [34.7, 26789.0], [34.8, 26794.0], [34.9, 26803.0], [35.0, 26805.0], [35.1, 26812.0], [35.2, 26815.0], [35.3, 26817.0], [35.4, 26826.0], [35.5, 26828.0], [35.6, 26843.0], [35.7, 26855.0], [35.8, 26868.0], [35.9, 26872.0], [36.0, 26876.0], [36.1, 26890.0], [36.2, 26896.0], [36.3, 26916.0], [36.4, 26923.0], [36.5, 26955.0], [36.6, 26961.0], [36.7, 26965.0], [36.8, 26970.0], [36.9, 26973.0], [37.0, 26975.0], [37.1, 26980.0], [37.2, 26981.0], [37.3, 26990.0], [37.4, 27010.0], [37.5, 27016.0], [37.6, 27038.0], [37.7, 27045.0], [37.8, 27050.0], [37.9, 27079.0], [38.0, 27089.0], [38.1, 27100.0], [38.2, 27100.0], [38.3, 27106.0], [38.4, 27106.0], [38.5, 27109.0], [38.6, 27110.0], [38.7, 27117.0], [38.8, 27118.0], [38.9, 27122.0], [39.0, 27127.0], [39.1, 27151.0], [39.2, 27159.0], [39.3, 27165.0], [39.4, 27165.0], [39.5, 27171.0], [39.6, 27175.0], [39.7, 27176.0], [39.8, 27180.0], [39.9, 27189.0], [40.0, 27202.0], [40.1, 27227.0], [40.2, 27235.0], [40.3, 27236.0], [40.4, 27237.0], [40.5, 27238.0], [40.6, 27239.0], [40.7, 27253.0], [40.8, 27275.0], [40.9, 27288.0], [41.0, 27293.0], [41.1, 27501.0], [41.2, 30372.0], [41.3, 30437.0], [41.4, 30575.0], [41.5, 30610.0], [41.6, 30662.0], [41.7, 30687.0], [41.8, 30691.0], [41.9, 30732.0], [42.0, 30794.0], [42.1, 30981.0], [42.2, 31085.0], [42.3, 31191.0], [42.4, 31320.0], [42.5, 31369.0], [42.6, 31383.0], [42.7, 31459.0], [42.8, 31609.0], [42.9, 31675.0], [43.0, 31732.0], [43.1, 31803.0], [43.2, 31812.0], [43.3, 31862.0], [43.4, 31918.0], [43.5, 32006.0], [43.6, 32021.0], [43.7, 32036.0], [43.8, 32081.0], [43.9, 32154.0], [44.0, 32163.0], [44.1, 32182.0], [44.2, 32228.0], [44.3, 32265.0], [44.4, 32275.0], [44.5, 32283.0], [44.6, 32307.0], [44.7, 32326.0], [44.8, 32332.0], [44.9, 32337.0], [45.0, 32362.0], [45.1, 32391.0], [45.2, 32432.0], [45.3, 32454.0], [45.4, 32477.0], [45.5, 32497.0], [45.6, 32525.0], [45.7, 32557.0], [45.8, 32589.0], [45.9, 32611.0], [46.0, 32624.0], [46.1, 32658.0], [46.2, 32679.0], [46.3, 32684.0], [46.4, 32711.0], [46.5, 32739.0], [46.6, 32755.0], [46.7, 32773.0], [46.8, 32863.0], [46.9, 32896.0], [47.0, 32903.0], [47.1, 32908.0], [47.2, 32931.0], [47.3, 32950.0], [47.4, 33016.0], [47.5, 33067.0], [47.6, 33527.0], [47.7, 33626.0], [47.8, 33654.0], [47.9, 33690.0], [48.0, 33721.0], [48.1, 33827.0], [48.2, 33844.0], [48.3, 33860.0], [48.4, 34385.0], [48.5, 34930.0], [48.6, 35047.0], [48.7, 35082.0], [48.8, 35134.0], [48.9, 35174.0], [49.0, 35215.0], [49.1, 35247.0], [49.2, 35297.0], [49.3, 35343.0], [49.4, 35367.0], [49.5, 35384.0], [49.6, 35405.0], [49.7, 35413.0], [49.8, 35449.0], [49.9, 35470.0], [50.0, 35498.0], [50.1, 35535.0], [50.2, 35571.0], [50.3, 35579.0], [50.4, 35659.0], [50.5, 35714.0], [50.6, 35758.0], [50.7, 35768.0], [50.8, 35790.0], [50.9, 35808.0], [51.0, 35812.0], [51.1, 35826.0], [51.2, 35853.0], [51.3, 35864.0], [51.4, 35869.0], [51.5, 35873.0], [51.6, 35876.0], [51.7, 35888.0], [51.8, 35927.0], [51.9, 35954.0], [52.0, 35990.0], [52.1, 36010.0], [52.2, 36018.0], [52.3, 36021.0], [52.4, 36033.0], [52.5, 36066.0], [52.6, 36073.0], [52.7, 36113.0], [52.8, 36115.0], [52.9, 36162.0], [53.0, 36177.0], [53.1, 36190.0], [53.2, 36229.0], [53.3, 36237.0], [53.4, 36257.0], [53.5, 36276.0], [53.6, 36305.0], [53.7, 36315.0], [53.8, 36316.0], [53.9, 36322.0], [54.0, 36324.0], [54.1, 36326.0], [54.2, 36327.0], [54.3, 36337.0], [54.4, 36338.0], [54.5, 36343.0], [54.6, 36349.0], [54.7, 36351.0], [54.8, 36351.0], [54.9, 36358.0], [55.0, 36362.0], [55.1, 36363.0], [55.2, 36367.0], [55.3, 36370.0], [55.4, 36372.0], [55.5, 36374.0], [55.6, 36379.0], [55.7, 36381.0], [55.8, 36385.0], [55.9, 36393.0], [56.0, 36393.0], [56.1, 36398.0], [56.2, 36398.0], [56.3, 36404.0], [56.4, 36406.0], [56.5, 36409.0], [56.6, 36410.0], [56.7, 36413.0], [56.8, 36418.0], [56.9, 36422.0], [57.0, 36427.0], [57.1, 36428.0], [57.2, 36435.0], [57.3, 36437.0], [57.4, 36446.0], [57.5, 36456.0], [57.6, 36458.0], [57.7, 36459.0], [57.8, 36462.0], [57.9, 36465.0], [58.0, 36470.0], [58.1, 36473.0], [58.2, 36476.0], [58.3, 36482.0], [58.4, 36487.0], [58.5, 36488.0], [58.6, 36493.0], [58.7, 36497.0], [58.8, 36499.0], [58.9, 36504.0], [59.0, 36507.0], [59.1, 36511.0], [59.2, 36516.0], [59.3, 36520.0], [59.4, 36523.0], [59.5, 36525.0], [59.6, 36529.0], [59.7, 36532.0], [59.8, 36535.0], [59.9, 36539.0], [60.0, 36541.0], [60.1, 36545.0], [60.2, 36548.0], [60.3, 36552.0], [60.4, 36553.0], [60.5, 36557.0], [60.6, 36561.0], [60.7, 36564.0], [60.8, 36569.0], [60.9, 36571.0], [61.0, 36573.0], [61.1, 36574.0], [61.2, 36578.0], [61.3, 36580.0], [61.4, 36582.0], [61.5, 36588.0], [61.6, 36593.0], [61.7, 36595.0], [61.8, 36599.0], [61.9, 36603.0], [62.0, 36605.0], [62.1, 36607.0], [62.2, 36608.0], [62.3, 36609.0], [62.4, 36613.0], [62.5, 36615.0], [62.6, 36618.0], [62.7, 36619.0], [62.8, 36622.0], [62.9, 36628.0], [63.0, 36634.0], [63.1, 36636.0], [63.2, 36637.0], [63.3, 36642.0], [63.4, 36642.0], [63.5, 36648.0], [63.6, 36649.0], [63.7, 36651.0], [63.8, 36652.0], [63.9, 36656.0], [64.0, 36659.0], [64.1, 36663.0], [64.2, 36666.0], [64.3, 36667.0], [64.4, 36669.0], [64.5, 36670.0], [64.6, 36674.0], [64.7, 36675.0], [64.8, 36676.0], [64.9, 36679.0], [65.0, 36685.0], [65.1, 36685.0], [65.2, 36687.0], [65.3, 36691.0], [65.4, 36693.0], [65.5, 36700.0], [65.6, 36705.0], [65.7, 36710.0], [65.8, 36714.0], [65.9, 36716.0], [66.0, 36718.0], [66.1, 36724.0], [66.2, 36729.0], [66.3, 36730.0], [66.4, 36731.0], [66.5, 36733.0], [66.6, 36733.0], [66.7, 36736.0], [66.8, 36741.0], [66.9, 36743.0], [67.0, 36749.0], [67.1, 36750.0], [67.2, 36754.0], [67.3, 36755.0], [67.4, 36758.0], [67.5, 36759.0], [67.6, 36763.0], [67.7, 36766.0], [67.8, 36769.0], [67.9, 36772.0], [68.0, 36776.0], [68.1, 36781.0], [68.2, 36785.0], [68.3, 36787.0], [68.4, 36790.0], [68.5, 36793.0], [68.6, 36794.0], [68.7, 36797.0], [68.8, 36800.0], [68.9, 36801.0], [69.0, 36803.0], [69.1, 36806.0], [69.2, 36811.0], [69.3, 36817.0], [69.4, 36820.0], [69.5, 36822.0], [69.6, 36825.0], [69.7, 36830.0], [69.8, 36831.0], [69.9, 36833.0], [70.0, 36834.0], [70.1, 36837.0], [70.2, 36840.0], [70.3, 36843.0], [70.4, 36847.0], [70.5, 36847.0], [70.6, 36850.0], [70.7, 36853.0], [70.8, 36853.0], [70.9, 36855.0], [71.0, 36857.0], [71.1, 36859.0], [71.2, 36860.0], [71.3, 36863.0], [71.4, 36867.0], [71.5, 36869.0], [71.6, 36874.0], [71.7, 36875.0], [71.8, 36876.0], [71.9, 36878.0], [72.0, 36881.0], [72.1, 36884.0], [72.2, 36887.0], [72.3, 36891.0], [72.4, 36894.0], [72.5, 36897.0], [72.6, 36900.0], [72.7, 36902.0], [72.8, 36904.0], [72.9, 36905.0], [73.0, 36911.0], [73.1, 36913.0], [73.2, 36917.0], [73.3, 36923.0], [73.4, 36925.0], [73.5, 36927.0], [73.6, 36928.0], [73.7, 36930.0], [73.8, 36930.0], [73.9, 36935.0], [74.0, 36936.0], [74.1, 36937.0], [74.2, 36939.0], [74.3, 36943.0], [74.4, 36949.0], [74.5, 36949.0], [74.6, 36950.0], [74.7, 36953.0], [74.8, 36958.0], [74.9, 36964.0], [75.0, 36965.0], [75.1, 36967.0], [75.2, 36968.0], [75.3, 36970.0], [75.4, 36971.0], [75.5, 36975.0], [75.6, 36977.0], [75.7, 36981.0], [75.8, 36988.0], [75.9, 36990.0], [76.0, 36991.0], [76.1, 36992.0], [76.2, 36994.0], [76.3, 36995.0], [76.4, 37000.0], [76.5, 37003.0], [76.6, 37006.0], [76.7, 37007.0], [76.8, 37007.0], [76.9, 37008.0], [77.0, 37014.0], [77.1, 37015.0], [77.2, 37016.0], [77.3, 37022.0], [77.4, 37026.0], [77.5, 37028.0], [77.6, 37029.0], [77.7, 37032.0], [77.8, 37032.0], [77.9, 37037.0], [78.0, 37038.0], [78.1, 37041.0], [78.2, 37043.0], [78.3, 37046.0], [78.4, 37047.0], [78.5, 37049.0], [78.6, 37052.0], [78.7, 37059.0], [78.8, 37060.0], [78.9, 37063.0], [79.0, 37070.0], [79.1, 37074.0], [79.2, 37076.0], [79.3, 37078.0], [79.4, 37082.0], [79.5, 37085.0], [79.6, 37086.0], [79.7, 37087.0], [79.8, 37091.0], [79.9, 37093.0], [80.0, 37094.0], [80.1, 37096.0], [80.2, 37106.0], [80.3, 37108.0], [80.4, 37112.0], [80.5, 37113.0], [80.6, 37119.0], [80.7, 37120.0], [80.8, 37128.0], [80.9, 37128.0], [81.0, 37135.0], [81.1, 37137.0], [81.2, 37138.0], [81.3, 37138.0], [81.4, 37141.0], [81.5, 37144.0], [81.6, 37147.0], [81.7, 37150.0], [81.8, 37152.0], [81.9, 37157.0], [82.0, 37158.0], [82.1, 37159.0], [82.2, 37162.0], [82.3, 37166.0], [82.4, 37169.0], [82.5, 37170.0], [82.6, 37176.0], [82.7, 37179.0], [82.8, 37181.0], [82.9, 37184.0], [83.0, 37190.0], [83.1, 37190.0], [83.2, 37193.0], [83.3, 37195.0], [83.4, 37196.0], [83.5, 37198.0], [83.6, 37199.0], [83.7, 37200.0], [83.8, 37201.0], [83.9, 37205.0], [84.0, 37211.0], [84.1, 37220.0], [84.2, 37226.0], [84.3, 37227.0], [84.4, 37231.0], [84.5, 37235.0], [84.6, 37241.0], [84.7, 37245.0], [84.8, 37249.0], [84.9, 37251.0], [85.0, 37256.0], [85.1, 37256.0], [85.2, 37260.0], [85.3, 37261.0], [85.4, 37266.0], [85.5, 37268.0], [85.6, 37269.0], [85.7, 37273.0], [85.8, 37278.0], [85.9, 37280.0], [86.0, 37281.0], [86.1, 37285.0], [86.2, 37290.0], [86.3, 37294.0], [86.4, 37295.0], [86.5, 37297.0], [86.6, 37298.0], [86.7, 37300.0], [86.8, 37305.0], [86.9, 37309.0], [87.0, 37312.0], [87.1, 37314.0], [87.2, 37316.0], [87.3, 37320.0], [87.4, 37321.0], [87.5, 37325.0], [87.6, 37328.0], [87.7, 37328.0], [87.8, 37329.0], [87.9, 37331.0], [88.0, 37333.0], [88.1, 37336.0], [88.2, 37338.0], [88.3, 37341.0], [88.4, 37344.0], [88.5, 37348.0], [88.6, 37349.0], [88.7, 37352.0], [88.8, 37354.0], [88.9, 37355.0], [89.0, 37356.0], [89.1, 37358.0], [89.2, 37361.0], [89.3, 37363.0], [89.4, 37365.0], [89.5, 37368.0], [89.6, 37376.0], [89.7, 37378.0], [89.8, 37380.0], [89.9, 37383.0], [90.0, 37385.0], [90.1, 37389.0], [90.2, 37391.0], [90.3, 37393.0], [90.4, 37396.0], [90.5, 37396.0], [90.6, 37399.0], [90.7, 37408.0], [90.8, 37411.0], [90.9, 37413.0], [91.0, 37416.0], [91.1, 37417.0], [91.2, 37417.0], [91.3, 37421.0], [91.4, 37423.0], [91.5, 37428.0], [91.6, 37429.0], [91.7, 37443.0], [91.8, 37444.0], [91.9, 37445.0], [92.0, 37449.0], [92.1, 37454.0], [92.2, 37456.0], [92.3, 37457.0], [92.4, 37459.0], [92.5, 37461.0], [92.6, 37462.0], [92.7, 37465.0], [92.8, 37467.0], [92.9, 37469.0], [93.0, 37469.0], [93.1, 37470.0], [93.2, 37473.0], [93.3, 37475.0], [93.4, 37475.0], [93.5, 37477.0], [93.6, 37479.0], [93.7, 37482.0], [93.8, 37488.0], [93.9, 37489.0], [94.0, 37491.0], [94.1, 37491.0], [94.2, 37494.0], [94.3, 37495.0], [94.4, 37498.0], [94.5, 37499.0], [94.6, 37500.0], [94.7, 37501.0], [94.8, 37502.0], [94.9, 37503.0], [95.0, 37504.0], [95.1, 37504.0], [95.2, 37506.0], [95.3, 37507.0], [95.4, 37507.0], [95.5, 37510.0], [95.6, 37511.0], [95.7, 37512.0], [95.8, 37514.0], [95.9, 37515.0], [96.0, 37516.0], [96.1, 37518.0], [96.2, 37518.0], [96.3, 37519.0], [96.4, 37519.0], [96.5, 37520.0], [96.6, 37521.0], [96.7, 37522.0], [96.8, 37522.0], [96.9, 37522.0], [97.0, 37523.0], [97.1, 37523.0], [97.2, 37523.0], [97.3, 37524.0], [97.4, 37524.0], [97.5, 37525.0], [97.6, 37526.0], [97.7, 37527.0], [97.8, 37528.0], [97.9, 37528.0], [98.0, 37529.0], [98.1, 37530.0], [98.2, 37531.0], [98.3, 37531.0], [98.4, 37531.0], [98.5, 37533.0], [98.6, 37534.0], [98.7, 37534.0], [98.8, 37536.0], [98.9, 37537.0], [99.0, 37538.0], [99.1, 37540.0], [99.2, 37540.0], [99.3, 37544.0], [99.4, 37548.0], [99.5, 37550.0], [99.6, 37552.0], [99.7, 37571.0], [99.8, 37616.0], [99.9, 37764.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1100.0, "maxY": 103.0, "series": [{"data": [[32900.0, 9.0], [33100.0, 1.0], [33500.0, 1.0], [33700.0, 3.0], [34500.0, 1.0], [34300.0, 1.0], [35100.0, 5.0], [34900.0, 1.0], [35300.0, 7.0], [35500.0, 6.0], [35700.0, 7.0], [35900.0, 6.0], [36100.0, 9.0], [36500.0, 60.0], [36700.0, 66.0], [36300.0, 54.0], [37100.0, 70.0], [36900.0, 77.0], [37300.0, 79.0], [37700.0, 1.0], [37500.0, 103.0], [1100.0, 2.0], [1200.0, 1.0], [1300.0, 3.0], [1400.0, 6.0], [1500.0, 4.0], [1600.0, 3.0], [1700.0, 8.0], [1800.0, 12.0], [1900.0, 8.0], [2000.0, 13.0], [2100.0, 8.0], [2200.0, 8.0], [2300.0, 5.0], [2400.0, 3.0], [2500.0, 6.0], [2600.0, 4.0], [2700.0, 7.0], [2800.0, 3.0], [2900.0, 2.0], [3000.0, 3.0], [3100.0, 6.0], [3200.0, 3.0], [3300.0, 9.0], [3400.0, 5.0], [3500.0, 6.0], [3700.0, 12.0], [3600.0, 7.0], [3800.0, 9.0], [3900.0, 12.0], [4000.0, 11.0], [4100.0, 11.0], [4200.0, 18.0], [4300.0, 10.0], [4400.0, 9.0], [4500.0, 14.0], [4600.0, 6.0], [4800.0, 5.0], [4700.0, 3.0], [4900.0, 5.0], [5100.0, 4.0], [5000.0, 5.0], [5200.0, 4.0], [5300.0, 7.0], [5400.0, 7.0], [5500.0, 7.0], [5600.0, 5.0], [5800.0, 3.0], [5700.0, 8.0], [6000.0, 1.0], [5900.0, 1.0], [6300.0, 1.0], [6500.0, 1.0], [6600.0, 2.0], [6900.0, 4.0], [6800.0, 4.0], [6700.0, 8.0], [7000.0, 4.0], [7100.0, 6.0], [7200.0, 3.0], [7300.0, 2.0], [7400.0, 7.0], [7500.0, 4.0], [7600.0, 1.0], [7700.0, 3.0], [7800.0, 4.0], [7900.0, 4.0], [8100.0, 7.0], [8000.0, 11.0], [8300.0, 6.0], [8200.0, 1.0], [8500.0, 5.0], [8400.0, 2.0], [8600.0, 4.0], [8700.0, 2.0], [9000.0, 2.0], [9200.0, 1.0], [9100.0, 1.0], [8800.0, 1.0], [8900.0, 2.0], [9900.0, 2.0], [9800.0, 1.0], [10100.0, 1.0], [11200.0, 1.0], [12000.0, 1.0], [12100.0, 1.0], [12700.0, 1.0], [12400.0, 1.0], [15400.0, 1.0], [23300.0, 1.0], [25400.0, 1.0], [25600.0, 1.0], [26000.0, 24.0], [25900.0, 13.0], [26100.0, 17.0], [26200.0, 15.0], [26300.0, 28.0], [26400.0, 28.0], [26500.0, 43.0], [26600.0, 40.0], [27500.0, 1.0], [27400.0, 1.0], [26800.0, 27.0], [26700.0, 51.0], [26900.0, 22.0], [27100.0, 38.0], [27000.0, 15.0], [27200.0, 22.0], [30300.0, 3.0], [30400.0, 2.0], [30500.0, 2.0], [30600.0, 7.0], [30700.0, 4.0], [30900.0, 2.0], [31000.0, 2.0], [31300.0, 6.0], [31100.0, 2.0], [31200.0, 1.0], [31400.0, 2.0], [31600.0, 3.0], [31700.0, 3.0], [31800.0, 5.0], [31900.0, 3.0], [32000.0, 7.0], [32100.0, 6.0], [32200.0, 9.0], [32300.0, 11.0], [32400.0, 8.0], [32500.0, 7.0], [32600.0, 10.0], [32700.0, 8.0], [32800.0, 3.0], [33000.0, 3.0], [33600.0, 6.0], [33800.0, 5.0], [34200.0, 1.0], [36400.0, 52.0], [35000.0, 4.0], [35200.0, 5.0], [35400.0, 9.0], [35600.0, 3.0], [35800.0, 19.0], [36000.0, 12.0], [36200.0, 8.0], [36600.0, 73.0], [36800.0, 75.0], [37000.0, 76.0], [37200.0, 60.0], [37400.0, 79.0], [38400.0, 1.0], [37600.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 38400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1600.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 12.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1600.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 388.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 897.5260000000007, "minX": 1.70585394E12, "maxY": 897.5260000000007, "series": [{"data": [[1.70585394E12, 897.5260000000007]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70585394E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3321.0, "minX": 1.0, "maxY": 38474.0, "series": [{"data": [[2.0, 36315.0], [3.0, 36343.0], [4.0, 36338.0], [5.0, 36324.0], [6.0, 36315.0], [7.0, 36316.0], [8.0, 36305.0], [9.0, 36301.0], [10.0, 36379.0], [11.0, 36367.0], [12.0, 36351.0], [13.0, 36326.0], [14.0, 36337.0], [15.0, 36322.0], [16.0, 36347.0], [17.0, 36351.0], [18.0, 36326.0], [19.0, 36355.0], [20.0, 36358.0], [21.0, 36338.0], [22.0, 36341.0], [23.0, 36351.0], [24.0, 36362.0], [25.0, 36409.0], [26.0, 36332.0], [27.0, 36363.0], [28.0, 36385.0], [29.0, 36365.0], [30.0, 36370.0], [31.0, 36370.0], [33.0, 36691.0], [32.0, 36465.0], [35.0, 36496.0], [34.0, 36394.0], [37.0, 36381.0], [36.0, 36370.0], [39.0, 36427.0], [38.0, 36372.0], [41.0, 36515.0], [40.0, 36428.0], [43.0, 36372.0], [42.0, 36393.0], [45.0, 36379.0], [44.0, 36386.0], [47.0, 36405.0], [46.0, 36417.0], [49.0, 36413.0], [48.0, 36398.0], [51.0, 36549.0], [50.0, 36401.0], [53.0, 36456.0], [52.0, 36409.0], [55.0, 36404.0], [54.0, 36465.0], [57.0, 36460.0], [56.0, 36437.0], [59.0, 36421.0], [58.0, 36432.0], [61.0, 36411.0], [60.0, 36428.0], [63.0, 36424.0], [62.0, 36422.0], [67.0, 36452.0], [66.0, 36476.0], [65.0, 36435.0], [64.0, 36446.0], [71.0, 36491.0], [70.0, 36488.0], [69.0, 36439.0], [68.0, 36436.0], [75.0, 36511.0], [74.0, 36523.0], [73.0, 36458.0], [72.0, 36470.0], [79.0, 36498.0], [78.0, 36481.0], [77.0, 36458.0], [76.0, 36473.0], [83.0, 36487.0], [82.0, 36458.0], [81.0, 36462.0], [80.0, 36472.0], [87.0, 36582.0], [86.0, 36649.0], [85.0, 36634.0], [84.0, 36545.0], [91.0, 36516.0], [90.0, 36520.0], [89.0, 36552.0], [88.0, 36614.0], [95.0, 36504.0], [94.0, 36482.0], [93.0, 36497.0], [92.0, 36493.0], [99.0, 36520.0], [98.0, 36488.0], [97.0, 36500.0], [96.0, 36507.0], [103.0, 36563.0], [102.0, 36523.0], [101.0, 36555.0], [100.0, 36642.0], [107.0, 36544.0], [106.0, 36509.0], [105.0, 36519.0], [104.0, 36525.0], [111.0, 36539.0], [110.0, 36528.0], [109.0, 36547.0], [108.0, 36531.0], [115.0, 36529.0], [114.0, 36573.0], [113.0, 36659.0], [112.0, 36552.0], [119.0, 36557.0], [118.0, 36608.0], [117.0, 36685.0], [116.0, 36541.0], [123.0, 36565.0], [122.0, 36668.0], [121.0, 36561.0], [120.0, 36572.0], [127.0, 36608.0], [126.0, 36594.0], [125.0, 36647.0], [124.0, 36548.0], [135.0, 36576.0], [134.0, 36574.0], [133.0, 36586.0], [132.0, 36667.0], [131.0, 36593.0], [130.0, 36693.0], [129.0, 36571.0], [128.0, 36561.0], [143.0, 36689.0], [142.0, 36687.0], [141.0, 36588.0], [140.0, 36691.0], [139.0, 36609.0], [138.0, 36603.0], [137.0, 36578.0], [136.0, 36569.0], [151.0, 36613.0], [150.0, 36608.0], [149.0, 36626.0], [148.0, 36648.0], [147.0, 36622.0], [146.0, 36605.0], [145.0, 36687.0], [144.0, 36601.0], [159.0, 36679.0], [158.0, 36676.0], [157.0, 36638.0], [156.0, 36636.0], [155.0, 36682.0], [154.0, 36634.0], [153.0, 36629.0], [152.0, 36621.0], [167.0, 36666.0], [166.0, 36675.0], [165.0, 36642.0], [164.0, 36661.5], [162.0, 36652.0], [161.0, 36675.0], [160.0, 36651.0], [175.0, 36667.0], [174.0, 36710.0], [173.0, 36677.0], [172.0, 36669.0], [171.0, 36672.0], [170.0, 36670.0], [169.0, 36657.0], [168.0, 36674.0], [183.0, 36715.5], [181.0, 36729.0], [180.0, 36718.0], [179.0, 36724.0], [178.0, 36731.0], [177.0, 36710.0], [176.0, 36714.0], [191.0, 36758.0], [190.0, 36766.0], [189.0, 36750.0], [188.0, 36741.0], [187.0, 36736.0], [186.0, 36722.0], [185.0, 36733.0], [184.0, 36731.0], [199.0, 36800.0], [198.0, 36746.0], [197.0, 36750.0], [196.0, 36759.0], [195.0, 36744.0], [193.0, 36740.0], [192.0, 36743.0], [207.0, 36757.0], [206.0, 36787.0], [205.0, 36776.0], [204.0, 36769.0], [203.0, 36781.0], [202.0, 36767.5], [200.0, 36768.0], [215.0, 36803.0], [214.0, 36943.0], [213.0, 36808.0], [212.0, 36776.0], [211.0, 36785.0], [210.0, 36793.0], [209.0, 36790.0], [208.0, 36770.0], [223.0, 36817.0], [222.0, 36811.0], [221.0, 36833.0], [220.0, 36806.0], [219.0, 36791.0], [218.0, 36797.0], [217.0, 36794.0], [216.0, 36803.0], [231.0, 36832.0], [230.0, 36834.0], [229.0, 36822.0], [228.0, 36830.0], [227.0, 36825.0], [226.0, 36822.0], [225.0, 36819.0], [224.0, 36813.0], [239.0, 36840.0], [238.0, 36853.0], [237.0, 36867.0], [236.0, 36847.0], [235.0, 36850.0], [234.0, 36839.0], [233.0, 36845.0], [232.0, 36837.0], [247.0, 36848.0], [246.0, 36875.0], [245.0, 36875.0], [244.0, 36847.0], [243.0, 36853.0], [242.0, 36856.0], [241.0, 36847.0], [240.0, 36843.0], [255.0, 36890.0], [254.0, 36878.0], [253.0, 36896.0], [252.0, 36881.0], [251.0, 36859.0], [250.0, 36869.0], [249.0, 36868.0], [248.0, 36876.0], [270.0, 36930.0], [271.0, 36911.0], [269.0, 36905.0], [268.0, 36900.0], [267.0, 36902.0], [266.0, 36882.0], [265.0, 36913.0], [264.0, 36902.0], [263.0, 36925.0], [257.0, 37032.0], [256.0, 36874.0], [259.0, 36887.0], [258.0, 36894.0], [262.0, 36884.0], [261.0, 36876.0], [260.0, 36897.0], [286.0, 36968.0], [287.0, 36949.0], [285.0, 36953.0], [275.0, 36917.0], [274.0, 36930.0], [273.0, 36904.0], [272.0, 36891.0], [283.0, 36928.5], [281.0, 36938.0], [280.0, 36943.0], [279.0, 36966.0], [278.0, 36936.0], [277.0, 36921.0], [276.0, 36950.0], [302.0, 37265.0], [303.0, 36967.0], [301.0, 37271.0], [300.0, 36994.0], [299.0, 36939.0], [298.0, 36936.0], [297.0, 36955.0], [296.0, 36950.0], [295.0, 36970.0], [288.0, 36981.0], [291.0, 36937.0], [290.0, 36972.5], [294.0, 36949.0], [293.0, 36988.0], [292.0, 36994.0], [318.0, 37006.0], [319.0, 37026.0], [317.0, 37002.0], [316.0, 36995.0], [315.0, 37000.0], [314.0, 37007.0], [313.0, 37007.0], [312.0, 36995.0], [311.0, 37005.0], [305.0, 36986.0], [304.0, 36975.0], [307.0, 36958.0], [306.0, 36980.0], [310.0, 36991.0], [309.0, 36994.0], [308.0, 36992.0], [334.0, 37034.0], [335.0, 37046.0], [333.0, 37032.0], [332.0, 37038.0], [331.0, 37041.0], [330.0, 37032.0], [329.0, 37028.0], [328.0, 37008.0], [327.0, 37003.0], [321.0, 37028.0], [320.0, 37022.0], [323.0, 37028.0], [322.0, 37014.0], [326.0, 37029.0], [325.0, 37015.0], [324.0, 37007.0], [350.0, 37071.0], [351.0, 37065.0], [349.0, 37061.0], [339.0, 37037.0], [338.0, 37040.0], [337.0, 37048.0], [336.0, 37038.0], [347.0, 37071.5], [345.0, 37052.0], [344.0, 37043.0], [343.0, 37060.0], [342.0, 37093.0], [341.0, 37049.0], [340.0, 37047.0], [366.0, 37113.0], [367.0, 37128.0], [365.0, 37096.0], [364.0, 37094.0], [363.0, 37091.0], [362.0, 37085.0], [361.0, 37088.0], [359.0, 37087.0], [352.0, 37059.0], [355.0, 37068.0], [353.0, 37046.0], [358.0, 37106.0], [357.0, 37081.0], [382.0, 37128.0], [383.0, 37157.0], [381.0, 37123.0], [380.0, 37119.0], [379.0, 37128.0], [378.0, 37123.5], [376.0, 37101.5], [374.0, 37117.5], [370.0, 37113.5], [368.0, 37086.0], [372.0, 37131.5], [397.0, 37184.0], [398.0, 37174.0], [396.0, 37158.0], [387.0, 37144.0], [386.0, 37150.0], [385.0, 37149.5], [395.0, 37162.0], [394.0, 37169.0], [393.0, 37158.0], [392.0, 37170.0], [391.0, 37147.0], [390.0, 37146.5], [388.0, 37151.0], [413.0, 37201.0], [415.0, 37193.0], [412.0, 37179.0], [403.0, 37200.0], [402.0, 37205.0], [401.0, 37170.0], [400.0, 37264.0], [411.0, 37194.0], [410.0, 37183.0], [409.0, 37197.0], [408.0, 37201.0], [407.0, 37195.0], [406.0, 37198.5], [404.0, 37190.0], [430.0, 37253.0], [431.0, 37231.0], [429.0, 37245.0], [428.0, 37243.0], [427.0, 37231.0], [426.0, 37226.0], [425.0, 37235.0], [424.0, 37241.0], [423.0, 37256.0], [417.0, 37193.0], [416.0, 37199.0], [419.0, 37190.0], [418.0, 37195.0], [422.0, 37191.0], [421.0, 37228.0], [420.0, 37190.0], [446.0, 37279.0], [447.0, 37269.0], [445.0, 37290.0], [444.0, 37281.0], [443.0, 37288.0], [442.0, 37256.0], [441.0, 37266.0], [440.0, 37227.0], [439.0, 37220.0], [433.0, 37258.0], [432.0, 37269.0], [435.0, 37241.0], [434.0, 37267.0], [438.0, 37251.0], [437.0, 37249.0], [436.0, 37256.0], [462.0, 37311.0], [463.0, 37325.0], [461.0, 37297.0], [460.0, 37294.0], [459.0, 37616.0], [458.0, 37322.0], [457.0, 37616.0], [456.0, 37305.0], [455.0, 37285.0], [449.0, 37274.0], [448.0, 37297.0], [451.0, 37298.0], [450.0, 37294.0], [454.0, 37260.0], [453.0, 37295.0], [452.0, 37278.0], [478.0, 37363.0], [479.0, 37355.0], [477.0, 37317.0], [476.0, 37313.0], [475.0, 37321.0], [474.0, 37328.0], [473.0, 37348.0], [472.0, 37338.0], [471.0, 37328.0], [465.0, 37349.0], [464.0, 37314.0], [467.0, 37304.0], [466.0, 37336.0], [470.0, 37621.0], [469.0, 37300.0], [468.0, 37309.0], [494.0, 37365.0], [495.0, 37378.0], [493.0, 37368.0], [492.0, 37354.0], [491.0, 37396.0], [490.0, 37392.0], [489.0, 37336.0], [488.0, 37333.0], [487.0, 37383.0], [480.0, 37331.0], [483.0, 37338.5], [481.0, 37379.0], [486.0, 37354.0], [485.0, 37343.0], [484.0, 37351.0], [510.0, 37385.0], [511.0, 37421.0], [509.0, 37391.0], [508.0, 37386.0], [507.0, 37401.0], [506.0, 37395.0], [505.0, 37361.0], [504.0, 37370.0], [503.0, 37365.0], [497.0, 37357.0], [496.0, 37355.0], [499.0, 37359.0], [498.0, 37389.0], [502.0, 37378.0], [501.0, 37411.0], [500.0, 37344.0], [536.0, 37428.0], [540.0, 37455.0], [528.0, 37418.0], [542.0, 37458.0], [538.0, 37451.0], [512.0, 37413.0], [516.0, 37386.5], [514.0, 37410.0], [518.0, 37396.0], [526.0, 37469.0], [524.0, 37445.0], [522.0, 37412.5], [520.0, 37397.5], [534.0, 37456.0], [572.0, 37488.0], [560.0, 37475.0], [562.0, 37497.0], [564.0, 37489.0], [574.0, 37498.0], [570.0, 37504.0], [568.0, 37475.0], [546.0, 37469.0], [548.0, 37466.0], [550.0, 37475.0], [558.0, 37454.0], [556.0, 37461.0], [554.0, 37475.0], [552.0, 37495.0], [566.0, 37482.0], [578.0, 37504.0], [604.0, 37529.0], [590.0, 19322.0], [588.0, 37494.0], [586.0, 37499.0], [584.0, 37491.0], [576.0, 37499.0], [580.0, 37507.0], [582.0, 37507.0], [592.0, 37536.0], [594.0, 37550.0], [596.0, 37527.0], [598.0, 37533.0], [606.0, 37540.0], [602.0, 37531.0], [600.0, 37523.0], [622.0, 37519.0], [620.0, 37512.0], [618.0, 37522.0], [616.0, 37530.0], [632.0, 19505.5], [614.0, 37553.0], [612.0, 37510.0], [610.0, 37521.0], [608.0, 37552.0], [634.0, 19442.5], [624.0, 37530.0], [626.0, 37511.0], [628.0, 37512.0], [630.0, 37527.0], [638.0, 37540.0], [636.0, 37540.0], [670.0, 37538.0], [656.0, 38474.0], [658.0, 37517.0], [660.0, 37515.0], [662.0, 37535.0], [668.0, 37501.0], [666.0, 37501.0], [664.0, 37491.0], [646.0, 37548.0], [644.0, 37529.0], [642.0, 37522.0], [640.0, 37526.0], [654.0, 37523.0], [652.0, 37532.0], [650.0, 37519.0], [648.0, 37519.0], [676.0, 37505.0], [696.0, 10811.25], [674.0, 37523.0], [678.0, 37485.0], [698.0, 37383.0], [700.0, 37349.0], [702.0, 19681.5], [684.0, 8879.6], [682.0, 13502.0], [680.0, 37519.0], [672.0, 37522.0], [686.0, 37477.0], [690.0, 37443.0], [688.0, 19451.5], [692.0, 19448.0], [694.0, 37417.0], [710.0, 13815.333333333334], [704.0, 19444.0], [706.0, 19596.0], [708.0, 37328.0], [722.0, 37297.0], [720.0, 37298.0], [724.0, 37268.0], [726.0, 37280.0], [734.0, 37227.0], [732.0, 37764.0], [730.0, 37281.0], [728.0, 37260.0], [714.0, 13651.333333333334], [712.0, 37326.0], [716.0, 37329.0], [718.0, 37315.0], [738.0, 37207.0], [740.0, 19455.5], [736.0, 19515.0], [750.0, 37166.0], [742.0, 37179.0], [760.0, 37096.0], [744.0, 13856.0], [746.0, 37181.0], [748.0, 13625.333333333334], [756.0, 19473.0], [754.0, 37144.0], [752.0, 37137.0], [758.0, 37135.0], [762.0, 37087.0], [764.0, 37082.0], [766.0, 37087.0], [768.0, 37058.0], [796.0, 36962.0], [772.0, 13839.0], [776.0, 19439.0], [778.0, 37008.0], [780.0, 37023.0], [770.0, 37049.0], [782.0, 36990.0], [784.0, 36990.0], [786.0, 36975.0], [788.0, 36965.0], [790.0, 36965.0], [798.0, 36928.0], [794.0, 36939.0], [792.0, 36971.0], [774.0, 37014.0], [828.0, 36860.0], [826.0, 19430.5], [816.0, 36834.0], [818.0, 36860.0], [820.0, 36900.0], [830.0, 36840.0], [824.0, 36871.0], [800.0, 36927.0], [802.0, 36928.0], [804.0, 36913.0], [806.0, 36907.0], [814.0, 36863.0], [812.0, 36880.0], [810.0, 36893.0], [808.0, 36912.0], [822.0, 36833.0], [860.0, 36716.0], [848.0, 36759.0], [850.0, 36742.0], [852.0, 36736.0], [862.0, 19479.0], [858.0, 36730.0], [856.0, 36730.0], [832.0, 36826.0], [834.0, 36820.0], [836.0, 36803.0], [838.0, 36801.0], [846.0, 36798.0], [844.0, 36783.0], [842.0, 36800.0], [840.0, 36794.0], [854.0, 36754.0], [870.0, 36685.0], [864.0, 13772.333333333334], [866.0, 19591.5], [868.0, 11004.5], [888.0, 36598.0], [890.0, 36595.0], [892.0, 36786.0], [894.0, 13915.0], [874.0, 19529.0], [872.0, 36649.0], [878.0, 36636.0], [876.0, 36637.0], [880.0, 19527.0], [882.0, 13798.333333333334], [886.0, 36604.0], [884.0, 36615.0], [910.0, 36410.0], [924.0, 36349.0], [904.0, 19313.5], [906.0, 36474.0], [908.0, 36459.0], [916.0, 19666.5], [914.0, 36393.0], [912.0, 36406.0], [918.0, 36607.0], [926.0, 36325.0], [922.0, 36362.0], [920.0, 36363.0], [902.0, 36538.0], [900.0, 36532.0], [898.0, 36553.0], [896.0, 36570.0], [930.0, 36276.0], [932.0, 19403.0], [942.0, 19515.5], [940.0, 36177.0], [936.0, 36229.0], [928.0, 36312.0], [950.0, 19208.5], [948.0, 36073.0], [946.0, 36115.0], [944.0, 36114.0], [958.0, 35990.0], [956.0, 36021.0], [952.0, 36028.0], [934.0, 36237.0], [962.0, 35954.0], [988.0, 35768.0], [966.0, 19372.5], [964.0, 35931.0], [960.0, 35992.0], [974.0, 35875.0], [972.0, 35869.0], [970.0, 35864.0], [968.0, 35888.0], [976.0, 35844.0], [978.0, 35826.0], [980.0, 35802.0], [982.0, 35810.0], [990.0, 35714.0], [986.0, 35759.0], [984.0, 35787.0], [992.0, 35659.0], [1018.0, 35247.0], [1022.0, 35174.0], [1002.0, 35467.0], [1000.0, 35498.0], [1004.0, 35470.0], [994.0, 35579.0], [996.0, 35575.0], [1006.0, 35413.0], [1014.0, 18941.0], [1012.0, 35384.0], [1010.0, 35367.0], [1008.0, 35405.0], [1020.0, 35215.0], [1016.0, 35297.0], [998.0, 35535.0], [1052.0, 33016.0], [1036.0, 18228.0], [1032.0, 34299.0], [1028.0, 35047.0], [1072.0, 32712.0], [1040.0, 33721.0], [1044.0, 33651.0], [1048.0, 33527.0], [1024.0, 35134.0], [1056.0, 32945.0], [1060.0, 32903.0], [1064.0, 32863.0], [1068.0, 32773.0], [1076.0, 32664.0], [1080.0, 32658.0], [1084.0, 32589.0], [1088.0, 32523.0], [1100.0, 17750.0], [1096.0, 32415.0], [1092.0, 32454.0], [1116.0, 32228.0], [1112.0, 32267.0], [1108.0, 32307.0], [1104.0, 32432.0], [1128.0, 13172.666666666666], [1124.0, 32081.0], [1120.0, 32204.0], [1132.0, 31918.0], [1144.0, 15333.5], [1140.0, 27293.0], [1136.0, 31811.0], [1148.0, 27238.0], [1156.0, 27236.0], [1208.0, 15466.5], [1152.0, 27238.0], [1180.0, 27154.0], [1200.0, 27117.0], [1164.0, 27193.0], [1160.0, 31732.0], [1176.0, 15329.5], [1172.0, 27165.0], [1168.0, 27175.0], [1192.0, 27127.0], [1188.0, 27126.0], [1196.0, 27115.0], [1204.0, 11367.333333333332], [1212.0, 15283.0], [1184.0, 31609.0], [1228.0, 15403.0], [1224.0, 13103.666666666666], [1216.0, 15347.0], [1220.0, 27008.0], [1244.0, 26955.0], [1248.0, 19286.333333333332], [1268.0, 26838.5], [1272.0, 31085.0], [1276.0, 26804.0], [1264.0, 26826.0], [1260.0, 26868.0], [1256.0, 26872.0], [1252.0, 11521.333333333332], [1232.0, 26965.0], [1236.0, 26977.0], [1240.0, 13083.8], [1288.0, 26775.0], [1280.0, 8490.0], [1284.0, 26786.0], [1304.0, 11581.333333333332], [1308.0, 15543.5], [1292.0, 26782.0], [1312.0, 11781.666666666668], [1340.0, 30794.0], [1336.0, 15528.5], [1328.0, 26746.0], [1332.0, 26736.0], [1316.0, 26777.0], [1320.0, 9811.25], [1324.0, 26724.0], [1296.0, 9588.4], [1300.0, 9826.25], [1348.0, 30736.0], [1356.0, 11806.666666666668], [1400.0, 26554.0], [1352.0, 15726.5], [1344.0, 26672.0], [1372.0, 26635.0], [1368.0, 26639.0], [1360.0, 26660.0], [1364.0, 17746.5], [1384.0, 30610.0], [1380.0, 26643.0], [1376.0, 26653.0], [1388.0, 26588.0], [1404.0, 26563.0], [1392.0, 30576.0], [1396.0, 26590.0], [1416.0, 26535.0], [1420.0, 26524.0], [1412.0, 15233.5], [1456.0, 26448.0], [1460.0, 26417.0], [1464.0, 26404.0], [1424.0, 15241.5], [1428.0, 3983.0], [1408.0, 26531.0], [1436.0, 26489.0], [1432.0, 26520.0], [1444.0, 26465.0], [1448.0, 26462.0], [1452.0, 26450.0], [1440.0, 26474.0], [1468.0, 26388.0], [1484.0, 26355.0], [1532.0, 26050.0], [1524.0, 18832.0], [1476.0, 26370.0], [1520.0, 26156.0], [1492.0, 26315.0], [1488.0, 26350.0], [1496.0, 26270.0], [1500.0, 26257.0], [1472.0, 26397.0], [1504.0, 26238.0], [1508.0, 26193.0], [1512.0, 26196.0], [1516.0, 26151.0], [1564.0, 25619.0], [1556.0, 11556.333333333332], [1552.0, 25938.0], [1560.0, 25917.0], [1584.0, 8542.0], [1548.0, 25962.0], [1540.0, 26024.0], [1536.0, 26016.0], [1588.0, 8597.0], [1592.0, 8442.0], [1576.0, 9915.0], [1572.0, 9922.0], [1568.0, 12797.0], [1580.0, 8641.0], [1596.0, 8357.0], [1628.0, 8204.0], [1604.0, 8041.0], [1620.0, 7928.0], [1616.0, 7968.0], [1624.0, 8527.0], [1600.0, 8146.0], [1608.0, 8021.0], [1644.0, 6020.0], [1632.0, 7612.0], [1636.0, 7470.0], [1640.0, 7458.0], [1660.0, 7015.0], [1656.0, 7090.0], [1652.0, 7092.0], [1648.0, 7150.0], [1612.0, 8058.0], [1692.0, 5652.0], [1664.0, 6893.0], [1716.0, 5322.0], [1724.0, 5093.0], [1684.0, 5248.0], [1680.0, 5867.0], [1688.0, 5725.0], [1668.0, 6754.0], [1672.0, 6637.0], [1676.0, 6692.0], [1712.0, 5100.5], [1696.0, 5574.0], [1700.0, 5545.0], [1704.0, 5454.0], [1708.0, 5398.0], [1720.0, 5176.0], [1732.0, 4870.0], [1728.0, 5037.0], [1053.0, 18137.0], [1085.0, 32569.0], [1033.0, 34567.0], [1029.0, 35004.0], [1037.0, 33829.0], [1073.0, 32684.0], [1041.0, 18552.0], [1045.0, 33654.0], [1049.0, 33120.0], [1025.0, 35126.0], [1057.0, 17999.5], [1061.0, 32908.0], [1065.0, 32768.0], [1069.0, 32744.0], [1077.0, 17930.0], [1081.0, 32619.0], [1093.0, 32497.0], [1097.0, 32379.0], [1101.0, 17583.5], [1145.0, 15385.5], [1089.0, 32490.0], [1117.0, 32182.0], [1113.0, 32265.0], [1109.0, 32283.0], [1105.0, 32335.0], [1125.0, 32063.0], [1121.0, 32154.0], [1129.0, 32006.0], [1133.0, 31912.0], [1141.0, 27278.0], [1137.0, 27288.0], [1149.0, 15510.0], [1157.0, 27235.0], [1201.0, 15320.0], [1153.0, 27236.0], [1165.0, 27203.0], [1161.0, 31749.0], [1173.0, 27165.0], [1169.0, 27178.0], [1177.0, 15439.0], [1193.0, 15110.5], [1189.0, 27120.0], [1197.0, 27107.0], [1205.0, 27089.0], [1209.0, 31493.0], [1213.0, 27050.0], [1185.0, 27118.0], [1229.0, 11660.0], [1217.0, 27016.0], [1221.0, 31369.0], [1245.0, 8364.166666666668], [1241.0, 26970.0], [1225.0, 31320.0], [1269.0, 26817.0], [1273.0, 31383.0], [1277.0, 31065.0], [1265.0, 11666.666666666668], [1249.0, 15399.5], [1253.0, 10484.0], [1261.0, 15409.0], [1233.0, 26959.0], [1237.0, 26984.0], [1285.0, 15402.5], [1289.0, 11638.333333333332], [1281.0, 26775.0], [1301.0, 26768.0], [1305.0, 26783.0], [1309.0, 15219.0], [1293.0, 9720.25], [1337.0, 26702.0], [1341.0, 15620.0], [1329.0, 15430.5], [1333.0, 15597.0], [1317.0, 26727.0], [1321.0, 26745.0], [1325.0, 26736.0], [1313.0, 15450.5], [1297.0, 30967.0], [1345.0, 26664.0], [1349.0, 13238.0], [1373.0, 30674.0], [1369.0, 26637.0], [1365.0, 30690.0], [1353.0, 26661.0], [1361.0, 11859.333333333332], [1385.0, 26586.0], [1381.0, 26646.0], [1377.0, 26644.0], [1389.0, 26592.0], [1405.0, 26552.0], [1393.0, 30575.0], [1397.0, 26586.0], [1401.0, 26556.0], [1417.0, 26532.0], [1457.0, 26420.0], [1465.0, 15553.5], [1421.0, 26505.0], [1413.0, 26537.0], [1461.0, 26408.0], [1425.0, 26513.0], [1409.0, 30477.0], [1437.0, 26485.0], [1433.0, 30395.0], [1429.0, 26511.5], [1445.0, 17608.5], [1449.0, 15256.5], [1453.0, 26436.0], [1469.0, 26393.0], [1501.0, 26252.0], [1481.0, 26365.5], [1477.0, 26369.0], [1521.0, 26149.0], [1493.0, 26276.0], [1489.0, 26337.0], [1497.0, 26265.0], [1473.0, 26386.0], [1525.0, 15179.5], [1529.0, 26067.0], [1505.0, 26219.0], [1509.0, 26190.0], [1513.0, 26186.0], [1517.0, 26160.0], [1533.0, 26037.0], [1565.0, 25499.0], [1549.0, 25968.0], [1593.0, 8400.0], [1597.0, 8192.0], [1553.0, 25934.0], [1557.0, 25909.0], [1561.0, 25913.0], [1541.0, 26030.0], [1537.0, 26018.0], [1585.0, 8549.0], [1589.0, 8521.0], [1577.0, 8923.0], [1573.0, 10100.0], [1569.0, 12189.0], [1581.0, 8609.0], [1629.0, 7566.0], [1609.0, 6318.5], [1621.0, 7808.0], [1617.0, 7976.0], [1625.0, 7718.0], [1601.0, 8189.0], [1605.0, 8072.0], [1645.0, 5838.0], [1633.0, 7451.0], [1637.0, 8147.0], [1661.0, 6947.0], [1657.0, 7073.0], [1653.0, 7172.0], [1649.0, 7275.0], [1613.0, 7876.0], [1693.0, 5632.0], [1681.0, 5800.0], [1685.0, 5734.0], [1689.0, 5728.0], [1665.0, 6795.0], [1669.0, 6748.0], [1673.0, 6388.0], [1677.0, 6532.0], [1697.0, 5558.0], [1701.0, 5544.0], [1705.0, 5458.0], [1709.0, 5368.0], [1725.0, 5082.0], [1721.0, 5147.0], [1717.0, 5280.0], [1713.0, 5352.0], [1729.0, 4990.0], [541.0, 37461.0], [543.0, 37462.0], [529.0, 37465.0], [533.0, 37429.5], [531.0, 37427.0], [539.0, 37446.0], [537.0, 37416.0], [527.0, 37441.0], [513.0, 37423.0], [517.0, 37411.0], [525.0, 37457.0], [523.0, 37449.0], [535.0, 37422.0], [573.0, 37493.0], [575.0, 37503.0], [561.0, 37473.0], [563.0, 37506.0], [565.0, 37479.0], [571.0, 37488.0], [569.0, 37472.0], [559.0, 37467.0], [545.0, 37464.5], [547.0, 37480.0], [549.0, 37469.0], [551.0, 37469.0], [557.0, 37463.0], [555.0, 37479.0], [553.0, 37476.0], [567.0, 37503.0], [591.0, 37548.0], [589.0, 37500.0], [587.0, 37491.0], [585.0, 37498.0], [577.0, 37502.0], [579.0, 37511.0], [581.0, 37506.0], [583.0, 37503.0], [607.0, 37543.0], [593.0, 37528.0], [595.0, 37523.0], [597.0, 37518.0], [599.0, 37522.0], [605.0, 37548.0], [603.0, 37522.0], [601.0, 37537.0], [611.0, 37533.0], [633.0, 19361.5], [621.0, 19696.5], [619.0, 37523.0], [617.0, 37529.0], [623.0, 19390.0], [615.0, 37524.0], [613.0, 37531.0], [609.0, 37526.0], [635.0, 37518.0], [639.0, 37514.0], [625.0, 37525.0], [627.0, 37515.0], [629.0, 37531.0], [631.0, 37518.0], [637.0, 37525.0], [669.0, 37489.0], [657.0, 13578.333333333334], [659.0, 37523.0], [661.0, 37531.0], [663.0, 37504.0], [671.0, 37512.0], [667.0, 37510.0], [665.0, 37516.0], [647.0, 37534.0], [645.0, 37544.0], [643.0, 37522.0], [641.0, 37551.0], [655.0, 37528.0], [653.0, 37531.0], [651.0, 37571.0], [649.0, 37524.0], [679.0, 37534.0], [673.0, 19638.0], [675.0, 19573.0], [677.0, 37520.0], [697.0, 13762.666666666666], [699.0, 37390.0], [701.0, 37376.0], [703.0, 37339.0], [683.0, 10669.5], [681.0, 37524.0], [685.0, 19707.5], [687.0, 19445.5], [689.0, 19598.5], [691.0, 19798.5], [693.0, 37428.0], [695.0, 37417.0], [733.0, 37250.0], [705.0, 13591.333333333334], [707.0, 19709.5], [709.0, 10753.75], [723.0, 13851.0], [721.0, 37320.0], [725.0, 37283.0], [727.0, 37273.0], [735.0, 37221.0], [731.0, 37246.0], [729.0, 37261.0], [711.0, 37329.0], [713.0, 37335.0], [715.0, 10721.5], [717.0, 13898.0], [719.0, 37290.0], [739.0, 37366.0], [761.0, 10814.75], [737.0, 37202.0], [751.0, 37138.0], [749.0, 37155.0], [741.0, 19577.5], [743.0, 37169.0], [745.0, 37158.0], [747.0, 37176.0], [755.0, 37141.0], [753.0, 37131.0], [757.0, 37107.0], [759.0, 37113.0], [763.0, 19681.0], [765.0, 37091.0], [767.0, 13637.333333333334], [783.0, 36992.0], [777.0, 37011.0], [779.0, 37007.0], [781.0, 36988.0], [769.0, 37070.0], [771.0, 37015.0], [799.0, 36924.0], [785.0, 36969.0], [787.0, 36973.0], [789.0, 36964.0], [791.0, 36934.0], [797.0, 36953.0], [795.0, 36937.0], [793.0, 36953.0], [775.0, 37031.0], [773.0, 37022.0], [829.0, 36859.0], [831.0, 36825.0], [817.0, 36860.0], [819.0, 36865.0], [821.0, 36855.0], [827.0, 36831.0], [825.0, 36853.0], [815.0, 36857.0], [801.0, 36949.0], [803.0, 36923.0], [805.0, 36926.0], [807.0, 36904.0], [813.0, 36884.0], [811.0, 36878.0], [809.0, 36902.0], [823.0, 36855.0], [861.0, 36703.0], [863.0, 19327.0], [849.0, 36726.0], [851.0, 36749.0], [853.0, 36754.0], [859.0, 36715.0], [857.0, 36733.0], [847.0, 36763.0], [833.0, 36797.0], [835.0, 36789.0], [837.0, 36831.0], [839.0, 36755.0], [845.0, 36781.0], [843.0, 36764.0], [841.0, 37163.0], [855.0, 36730.0], [869.0, 36694.0], [889.0, 36592.0], [865.0, 19707.0], [871.0, 36618.0], [891.0, 36574.0], [895.0, 36580.0], [893.0, 19402.0], [867.0, 13810.333333333334], [873.0, 36653.0], [875.0, 19548.5], [879.0, 19427.0], [877.0, 36642.0], [881.0, 13887.0], [887.0, 36599.0], [885.0, 36606.0], [883.0, 36616.0], [921.0, 19669.0], [905.0, 36482.0], [907.0, 36468.0], [909.0, 36418.0], [915.0, 36393.0], [913.0, 36398.0], [917.0, 36398.0], [919.0, 36382.0], [925.0, 36324.0], [923.0, 36350.0], [903.0, 36506.0], [901.0, 36535.0], [899.0, 36541.0], [897.0, 36564.0], [911.0, 36407.0], [929.0, 36533.0], [957.0, 36020.0], [941.0, 36167.0], [939.0, 36187.0], [937.0, 36205.0], [943.0, 36137.0], [931.0, 36270.0], [949.0, 36066.0], [947.0, 36076.0], [945.0, 36113.0], [959.0, 36011.0], [955.0, 36025.5], [953.0, 36010.0], [935.0, 36235.0], [933.0, 36257.0], [963.0, 35927.0], [965.0, 35894.0], [961.0, 35972.0], [975.0, 35853.0], [973.0, 35853.0], [971.0, 35864.0], [969.0, 35870.0], [967.0, 19336.0], [991.0, 35687.0], [977.0, 35873.0], [979.0, 35812.0], [981.0, 35808.0], [983.0, 35813.0], [989.0, 35744.0], [987.0, 35758.0], [985.0, 35790.0], [1007.0, 35410.0], [997.0, 19409.5], [1003.0, 18982.0], [1001.0, 35474.0], [1005.0, 35428.0], [993.0, 35639.0], [995.0, 35571.0], [1009.0, 18978.0], [1013.0, 35361.0], [1011.0, 35380.0], [1015.0, 35337.0], [1023.0, 35145.0], [1021.0, 35189.0], [1019.0, 35232.0], [1017.0, 35285.0], [999.0, 35525.0], [1030.0, 34930.0], [1034.0, 33860.0], [1038.0, 33827.0], [1074.0, 17713.5], [1026.0, 18849.0], [1042.0, 33690.0], [1046.0, 33621.0], [1050.0, 33067.0], [1054.0, 32950.0], [1058.0, 32903.0], [1062.0, 32896.0], [1066.0, 32798.0], [1070.0, 32711.0], [1078.0, 32652.0], [1082.0, 32611.0], [1086.0, 32557.0], [1094.0, 32448.0], [1098.0, 32391.0], [1090.0, 32543.0], [1118.0, 32163.0], [1114.0, 32277.0], [1106.0, 32328.0], [1126.0, 32036.0], [1122.0, 32158.0], [1130.0, 32021.0], [1134.0, 31862.0], [1142.0, 31813.0], [1138.0, 27288.0], [1102.0, 32326.0], [1150.0, 27238.0], [1146.0, 27253.0], [1158.0, 27227.0], [1186.0, 15099.0], [1154.0, 27237.0], [1182.0, 27165.5], [1166.0, 27171.0], [1162.0, 31675.0], [1174.0, 27180.0], [1170.0, 27189.0], [1190.0, 27122.0], [1194.0, 27109.0], [1198.0, 15400.0], [1206.0, 27082.0], [1210.0, 31459.0], [1214.0, 11581.666666666668], [1202.0, 27100.0], [1270.0, 15478.5], [1218.0, 27010.0], [1222.0, 31383.0], [1246.0, 15454.0], [1226.0, 15472.5], [1274.0, 26812.0], [1278.0, 4086.0], [1266.0, 15424.0], [1254.0, 15137.0], [1262.0, 15136.5], [1258.0, 26872.0], [1250.0, 26896.0], [1234.0, 15125.0], [1238.0, 15153.0], [1290.0, 26776.0], [1286.0, 11794.0], [1282.0, 26798.0], [1310.0, 15650.5], [1302.0, 26788.0], [1306.0, 26789.0], [1294.0, 26776.0], [1342.0, 26677.0], [1338.0, 26699.0], [1334.0, 11921.666666666668], [1330.0, 26737.0], [1314.0, 15661.0], [1322.0, 9940.0], [1326.0, 11916.333333333332], [1318.0, 8793.2], [1298.0, 26775.0], [1354.0, 26664.0], [1346.0, 26669.0], [1350.0, 30732.0], [1374.0, 30662.0], [1370.0, 26631.0], [1358.0, 26656.5], [1362.0, 26650.0], [1386.0, 26604.0], [1382.0, 26621.0], [1378.0, 26646.0], [1390.0, 26579.0], [1406.0, 26529.0], [1394.0, 15227.0], [1398.0, 26560.0], [1402.0, 11934.666666666668], [1418.0, 26524.0], [1422.0, 17558.5], [1414.0, 26524.0], [1458.0, 26422.0], [1462.0, 27420.0], [1410.0, 26538.0], [1438.0, 26489.0], [1434.0, 26495.0], [1430.0, 26527.0], [1442.0, 15686.5], [1446.0, 26451.0], [1450.0, 26455.0], [1470.0, 26387.0], [1466.0, 26397.0], [1474.0, 15767.0], [1478.0, 26378.0], [1494.0, 15234.0], [1490.0, 26332.0], [1498.0, 26256.0], [1502.0, 26241.0], [1526.0, 26079.0], [1530.0, 26062.0], [1510.0, 26186.0], [1514.0, 26189.0], [1518.0, 26154.0], [1534.0, 26039.0], [1566.0, 15451.0], [1554.0, 27501.0], [1558.0, 26033.0], [1562.0, 26046.0], [1550.0, 25946.0], [1546.0, 26008.25], [1538.0, 26021.0], [1586.0, 9145.0], [1590.0, 9001.0], [1578.0, 6653.0], [1574.0, 9869.0], [1570.0, 12017.0], [1582.0, 8635.0], [1598.0, 8197.0], [1594.0, 8309.0], [1602.0, 8079.0], [1650.0, 7251.0], [1658.0, 6991.0], [1662.0, 6891.0], [1622.0, 8346.0], [1618.0, 7847.0], [1626.0, 7780.0], [1606.0, 8021.0], [1630.0, 7553.0], [1646.0, 7191.0], [1634.0, 7550.0], [1638.0, 8387.0], [1642.0, 7459.0], [1654.0, 7150.0], [1614.0, 8001.0], [1610.0, 8038.0], [1666.0, 6787.0], [1682.0, 5774.0], [1686.0, 5703.0], [1690.0, 5667.0], [1670.0, 6743.0], [1674.0, 6780.0], [1678.0, 6902.0], [1694.0, 6066.0], [1698.0, 5556.0], [1702.0, 5481.0], [1706.0, 5426.0], [1710.0, 5390.0], [1726.0, 5033.0], [1722.0, 5126.0], [1718.0, 5248.0], [1714.0, 5314.0], [1730.0, 4997.0], [1031.0, 34385.0], [1035.0, 33849.0], [1027.0, 35073.0], [1039.0, 33753.0], [1043.0, 33660.0], [1047.0, 33626.0], [1051.0, 33028.0], [1055.0, 32931.0], [1059.0, 32914.0], [1063.0, 32870.0], [1067.0, 32755.0], [1071.0, 32739.0], [1075.0, 32682.0], [1079.0, 17895.0], [1083.0, 17681.5], [1087.0, 32525.0], [1095.0, 32477.0], [1099.0, 32356.0], [1091.0, 32465.0], [1119.0, 32166.0], [1115.0, 32250.0], [1111.0, 32279.5], [1107.0, 32323.0], [1127.0, 32020.0], [1123.0, 32128.0], [1131.0, 31936.0], [1135.0, 31803.0], [1143.0, 27276.0], [1139.0, 31812.0], [1103.0, 32332.0], [1151.0, 27237.0], [1147.0, 27254.0], [1155.0, 27235.0], [1159.0, 17584.5], [1183.0, 31617.0], [1179.0, 27155.0], [1167.0, 27165.0], [1163.0, 27202.0], [1175.0, 27175.0], [1171.0, 27182.0], [1191.0, 27106.0], [1187.0, 27118.0], [1195.0, 15100.5], [1199.0, 15461.0], [1207.0, 15404.5], [1211.0, 27038.0], [1215.0, 11302.333333333332], [1203.0, 15126.5], [1271.0, 26828.0], [1227.0, 11457.666666666668], [1219.0, 27013.0], [1223.0, 31384.0], [1243.0, 26977.5], [1247.0, 3701.0], [1279.0, 26813.5], [1275.0, 26803.0], [1231.0, 26971.0], [1255.0, 15134.5], [1263.0, 31121.0], [1259.0, 26876.0], [1251.0, 26893.0], [1235.0, 26971.0], [1239.0, 3321.0], [1291.0, 26761.0], [1295.0, 11707.0], [1283.0, 26777.0], [1311.0, 26770.0], [1303.0, 26769.0], [1307.0, 26774.0], [1287.0, 26760.0], [1343.0, 26668.0], [1339.0, 8212.5], [1335.0, 26691.0], [1331.0, 26714.0], [1315.0, 26758.0], [1323.0, 26731.0], [1327.0, 26732.0], [1319.0, 11405.666666666668], [1299.0, 15536.0], [1347.0, 26660.0], [1355.0, 26665.0], [1359.0, 15456.5], [1351.0, 26659.0], [1375.0, 26642.0], [1371.0, 26634.0], [1367.0, 26648.5], [1363.0, 30687.0], [1387.0, 15730.0], [1383.0, 30651.0], [1379.0, 26634.0], [1391.0, 26581.0], [1407.0, 26527.0], [1403.0, 26545.0], [1395.0, 26592.0], [1399.0, 26561.0], [1419.0, 26537.0], [1415.0, 26541.0], [1423.0, 26521.0], [1459.0, 26426.0], [1463.0, 26395.0], [1427.0, 26521.5], [1439.0, 26478.0], [1411.0, 26535.0], [1435.0, 30372.0], [1431.0, 26501.0], [1447.0, 26451.0], [1455.0, 26439.5], [1471.0, 26386.0], [1467.0, 26385.0], [1475.0, 26376.0], [1479.0, 26370.0], [1487.0, 20799.5], [1483.0, 26359.0], [1523.0, 26114.0], [1491.0, 26312.0], [1495.0, 26288.0], [1499.0, 26260.0], [1503.0, 26235.0], [1527.0, 26067.0], [1531.0, 26070.0], [1535.0, 26041.0], [1507.0, 26212.5], [1511.0, 26193.0], [1515.0, 26182.0], [1519.0, 26162.0], [1539.0, 26008.0], [1555.0, 25913.0], [1559.0, 26018.0], [1563.0, 23302.0], [1551.0, 25943.0], [1547.0, 25966.0], [1543.0, 26027.0], [1567.0, 12442.0], [1587.0, 8601.0], [1591.0, 9286.0], [1575.0, 8962.0], [1571.0, 11238.0], [1579.0, 8705.0], [1583.0, 8706.0], [1599.0, 8157.0], [1595.0, 8323.0], [1631.0, 7515.0], [1603.0, 9002.0], [1623.0, 6359.5], [1619.0, 7924.0], [1627.0, 7744.0], [1607.0, 8001.0], [1647.0, 7310.0], [1663.0, 6891.0], [1635.0, 8346.0], [1639.0, 7462.0], [1643.0, 7254.0], [1659.0, 6989.0], [1655.0, 7125.0], [1651.0, 7110.0], [1615.0, 7880.0], [1611.0, 8021.0], [1695.0, 5623.0], [1683.0, 5767.0], [1687.0, 5715.0], [1691.0, 5666.0], [1667.0, 6781.0], [1671.0, 6722.0], [1675.0, 6814.0], [1679.0, 5974.0], [1727.0, 5034.0], [1699.0, 5551.0], [1703.0, 5475.0], [1707.0, 5824.0], [1711.0, 5400.0], [1723.0, 5505.0], [1719.0, 5239.0], [1715.0, 5292.0], [1731.0, 4940.0], [1.0, 36327.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[897.524999999998, 27572.925500000012]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1732.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3170.266666666667, "minX": 1.70585394E12, "maxY": 144871.86666666667, "series": [{"data": [[1.70585394E12, 144871.86666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70585394E12, 3170.266666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70585394E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 27572.925500000012, "minX": 1.70585394E12, "maxY": 27572.925500000012, "series": [{"data": [[1.70585394E12, 27572.925500000012]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70585394E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16679.360000000004, "minX": 1.70585394E12, "maxY": 16679.360000000004, "series": [{"data": [[1.70585394E12, 16679.360000000004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70585394E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 15901.42549999999, "minX": 1.70585394E12, "maxY": 15901.42549999999, "series": [{"data": [[1.70585394E12, 15901.42549999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70585394E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1137.0, "minX": 1.70585394E12, "maxY": 38474.0, "series": [{"data": [[1.70585394E12, 38474.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70585394E12, 37445.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70585394E12, 37540.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70585394E12, 37516.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70585394E12, 1137.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70585394E12, 36531.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70585394E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1823.0, "minX": 1.0, "maxY": 37268.0, "series": [{"data": [[2.0, 10011.0], [32.0, 35340.0], [139.0, 37268.0], [155.0, 31609.0], [41.0, 5632.0], [660.0, 37035.5], [47.0, 2353.0], [3.0, 12189.0], [12.0, 33836.5], [51.0, 7876.0], [205.0, 30668.0], [54.0, 1823.0], [1.0, 12442.0], [64.0, 32385.0], [73.0, 3646.0], [72.0, 35942.5], [84.0, 4297.0], [23.0, 6891.0], [24.0, 32947.5], [27.0, 6825.5], [127.0, 36703.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 25559.0], [1.0, 25913.0], [70.0, 26094.0], [155.0, 27076.5], [205.0, 26590.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 660.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 30729.5, "series": [{"data": [[2.0, 2684.0], [32.0, 20153.5], [139.0, 27862.0], [155.0, 10028.0], [41.0, 5541.0], [660.0, 30729.5], [47.0, 2340.0], [3.0, 3157.0], [12.0, 15336.5], [51.0, 7548.0], [205.0, 9139.5], [54.0, 1779.5], [1.0, 4336.0], [64.0, 11241.5], [73.0, 3636.0], [72.0, 23600.5], [84.0, 4289.5], [23.0, 6885.0], [24.0, 12791.5], [27.0, 5149.5], [127.0, 26580.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [1.0, 0.0], [70.0, 0.0], [155.0, 0.0], [205.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 660.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.70585394E12, "maxY": 33.333333333333336, "series": [{"data": [[1.70585394E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70585394E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.70585394E12, "maxY": 26.866666666666667, "series": [{"data": [[1.70585394E12, 26.866666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70585394E12, 6.433333333333334]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.70585394E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70585394E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.466666666666667, "minX": 1.70585394E12, "maxY": 26.866666666666667, "series": [{"data": [[1.70585394E12, 26.866666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.70585394E12, 6.466666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70585394E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.466666666666667, "minX": 1.70585394E12, "maxY": 26.866666666666667, "series": [{"data": [[1.70585394E12, 26.866666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70585394E12, 6.466666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70585394E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

